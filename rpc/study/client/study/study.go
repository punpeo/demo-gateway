// Code generated by goctl. DO NOT EDIT.
// Source: study.proto

package study

import (
	"context"

	"demo-gateway/rpc/study/study"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	HelloRequest     = study.HelloRequest
	HelloResponse    = study.HelloResponse
	UserInfoRequest  = study.UserInfoRequest
	UserInfoResponse = study.UserInfoResponse

	Study interface {
		Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	}

	defaultStudy struct {
		cli zrpc.Client
	}
)

func NewStudy(cli zrpc.Client) Study {
	return &defaultStudy{
		cli: cli,
	}
}

func (m *defaultStudy) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	client := study.NewStudyClient(m.cli.Conn())
	return client.Hello(ctx, in, opts...)
}

func (m *defaultStudy) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := study.NewStudyClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}
